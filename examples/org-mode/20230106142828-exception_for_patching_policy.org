:properties:
:CFEngine_Example_Index: [[id:38277465-771a-4db4-983a-8dfd434b1aff][CFEngine_examples]]
:CFEngine_Functions: [[id:748f68b3-8a9b-4ed6-b161-96080c08e4ce][Function: readfile()]] [[id:b9a498ff-0f13-4195-9850-9d1b4ec7a403][Function: concat()]] [[id:79fc02c5-2664-48bc-bcd1-6a4aeb5821f0][Function: fileexists()]] [[id:e117ed1d-5096-4212-9199-e0b4dc04580f][Function: strftime()]] [[id:4e90de3a-a792-40cf-8d83-3157d5317310][Function: filestat()]] [[id:24647e3a-2af2-4460-897d-5b539bff2171][Function: eval()]] [[id:11e7b5ea-3929-448a-a67f-17f43efe5082][Function: int()]] [[id:f2ae3e2a-2f57-405f-a975-de2e4a38e0ea][Function: isgreaterthan()]]
:CFEngine_PromiseTypes: [[id:b31e06a4-d3b1-44f2-9292-cd20ca17cb66][Promise type: vars]]  [[id:23504787-b597-41ff-819d-b9625f773210][Promise type: files]]
:ID:       1593c38a-cf61-4de7-9763-966b4db4295b
:CREATED:  [2023-01-06 Fri 14:34]
:end:
#+title: Example illustrating exception for patching policy

#+caption: exception_for_patching_policy.cf
#+begin_src cfengine3 :include-stdlib t :log-level info :exports both :tangle exception_for_patching_policy.cf
  bundle agent __main__
  {
    vars:
        "regular_patching_exception_flagfile" string => "/tmp/regular-patch.exception";

        # I like to encourage leaving tidbits of information that can be reported
        # on. E.g. you could even ignore the flag file if it's not populated with
        # any text.

        "regular_patching_exception_reason"
          string => readfile( "$(regular_patching_exception_flagfile)", 1k),
          meta => { "inventory",
                    "attribute_name=Regular Patching Exception Reason"},
          comment => concat( "We inventory the content of the file in case ",
                             "someone has blessed us with an explanation."),
          if => fileexists( $(regular_patching_exception_flagfile) );


      # I like to inventory when something started, or even dynamically calculate
      # the amount of time (minutes, or days) something has been in effect for
      # reporting. This can be very useful for building Dashboard Alerts and or
      # Compliance Report Checks. For example, you could have a check in a
      # compliance report that regular patching has not been in exception for more
      # than N days (use eval() and now() to calculate days since ctime and
      # inventory that, then the condition could be that this inventory item is not > N days).


        "regular_patching_exception_start"
          string => strftime( localtime,
                              "%A, %B %d %Y %Z", # This won't sort well, but is easy for humans to read
                                                # Simply re-format the time string to whatever works well for you
                              filestat( "$(regular_patching_exception_flagfile)", ctime )),
          meta => { "inventory",
                    "attribute_name=Regular Patching Exception Start"},
          comment => concat( "We inventory the creation time of the file as it's a good ",
                             "indication of when the exception started."),
          if => fileexists( $(regular_patching_exception_flagfile) );

        "regular_patching_exception_active_days"
          int => int( eval( "($(with)-$(sys.systime))/86400", math) ),
          meta => { "inventory",
                    "attribute_name=Regular Patching Exception Active Days"},
          with => filestat( "$(regular_patching_exception_flagfile)", ctime );

      files:

      # You might want to automatically clean up the flag file based on some
      # conditon, for example here if the file has been here for too many days

        "$(regular_patching_exception_flagfile)"
          delete => default:tidy,
          if => isgreaterthan( $(regular_patching_exception_active_days),
                               $(regular_patching_exception_max_days) ),
          comment => concat( "We only allow regular patching to be skipped ",
                             "for $(regular_patching_exception_max_days) days ",
                             "at which time the file is automatically removed." );
  }
#+end_src


#+caption: Shell command with stderr
#+begin_src sh :results output :exports both
  exec 2>&1
  echo "Because Nick said so" > /tmp/regular-patch.exception
  chmod 600 ./exception_for_patching_policy.cf
  cf-agent -Kf ./exception_for_patching_policy.cf --show-evaluated-vars=default:main\\.
  :
#+end_src

#+RESULTS:
: Variable name                            Variable value                                               Meta tags                                Comment
: default:main.regular_patching_exception_active_days 0                                                            source=promise,inventory,attribute_name=Regular Patching Exception Active Days
: default:main.regular_patching_exception_flagfile /tmp/regular-patch.exception                                 source=promise
: default:main.regular_patching_exception_reason Because Nick said so                                         source=promise,inventory,attribute_name=Regular Patching Exception Reason We inventory the content of the file in case someone has blessed us with an explanation.
: default:main.regular_patching_exception_start Friday, January 06 2023 CST                                  source=promise,inventory,attribute_name=Regular Patching Exception Start We inventory the creation time of the file as it's a good indication of when the exception started.

* Reporting in Mission Portal                             :ATTACH:
:PROPERTIES:
:ID:       dc9ee193-8716-4ca7-b8aa-57d7997605af
:END:

Then in Mission Portal, these will be available in Inventory.

#+DOWNLOADED: file:///tmp/Spectacle.HhOUEJ/Screenshot_2023-01-06_142208.png @ 2023-01-06 14:22:11
[[attachment:2023-01-06_14-22-11_Screenshot_2023-01-06_142208.png]]

And then you can also easily use the data in a compliance report:

#+DOWNLOADED: file:///tmp/Spectacle.HhOUEJ/Screenshot_2023-01-06_142140.png @ 2023-01-06 14:21:46
[[attachment:2023-01-06_14-21-46_Screenshot_2023-01-06_142140.png]]
