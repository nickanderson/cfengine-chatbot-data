:PROPERTIES:
:ID:       f9a70d39-6802-4381-9515-3ec01dc7fd3c
:CREATED:  [2022-06-14 Tue 09:13]
:END:
#+title: Example illustrating the classes and variables module protocol
[[id:38277465-771a-4db4-983a-8dfd434b1aff][CFEngine Examples]]

The module protocol allows you to define classes and variables by emitting information from an executable on standard out.

#+CAPTION: ~/.cfagent/modules/simple_module.sh
#+begin_src sh :results output file :file /tmp/module-protocol-output.dat :exports both :tangle ~/.cfagent/modules/simple_module.sh
  #!/bin/sh

  # ^context is optional, it allows you to target a specific /bundle/ in which
  # variables will be defined. It defaults to the canonified leaf of the module
  # filename. It applies until it is set to a different context, or until the end
  # of the module.
  /bin/echo ^context=fabios_inventory

  # ^meta is optional, it allows you to define tags which will be applied to
  # variables and classes. Like ^context, it applies until it is re-set or until
  # the end of the module.

  # =my_variable=Defines a string.
  /bin/echo ^meta=inventory,attribute_name=Owner
  /bin/echo "=owner=Fabio"

  # '@my_list= { "defines", "a", "list" }' Note: the reporting protocal will
  # truncate lists longer than 4k, so it is not advised to use lists for inventory
  # if there is a chance they will be longer than 4k. Instead, it is better to
  # define individual variables, typically by way of a classic array.

  /bin/echo ^meta=inventory,attribute_name=Administrative Contacts
  /bin/echo "@admin_contact= { 'Fabio', 'Nick', '911' }"

  # "=classic_array[key]=array key val" defines a classic array. Fundamentally,
  # classic arrays are a collection of individual variables, but they are treated
  # like associative arrays. Commonly, these are used to avoid the limitation of
  # reporting only up to 4k worth of data for individual items. They are
  # convenient because they can be leveraged to produce lists using getindices()
  # and/or getvalues().

  /bin/echo ^meta=inventory,attribute_name=USB Devices
  /bin/echo "=myarray[key]= array key val"
  /bin/echo "=usb_device[Bus 001 Device 002: ID 8087:8001]=Intel Corp."
  /bin/echo "=usb_device[Bus 001 Device 001: ID 1d6b:0002]=Linux Foundation 2.0 root hub"
  /bin/echo "=usb_device[Bus 003 Device 003: ID 17ef:1010]=Lenovo Lenovo ThinkPad Dock"
  /bin/echo "=usb_device[Bus 003 Device 001: ID 1d6b:0003]=Linux Foundation 3.0 root hub"
  /bin/echo "=usb_device[Bus 002 Device 009: ID 04ca:703c]=Lite-On Technology Corp. Integrated Camera"
  /bin/echo "=usb_device[Bus 002 Device 007: ID 8087:0a2a]=Intel Corp."
  /bin/echo "=usb_device[Bus 002 Device 005: ID 04f3:036d]=Elan Microelectronics Corp. Touchscreen"
  /bin/echo "=usb_device[Bus 002 Device 054: ID 046d:081a]=Logitech, Inc. Webcam C260"
  /bin/echo "=usb_device[Bus 002 Device 053: ID 17ef:100f]=Lenovo"
  /bin/echo "=usb_device[Bus 002 Device 055: ID 074d:0005]=Micronas GmbH"
  /bin/echo "=usb_device[Bus 002 Device 052: ID 17ef:1010]=Lenovo Lenovo ThinkPad Dock"
  /bin/echo "=usb_device[Bus 002 Device 004: ID 413c:2006]=Dell Computer Corp."
  /bin/echo "=usb_device[Bus 002 Device 002: ID 413c:1004]=Dell Computer Corp. Dell USB Keyboard Hub"
  /bin/echo "=usb_device[Bus 002 Device 001: ID 1d6b:0002]=Linux Foundation 2.0 root hub"

  # '%mydata={ "key": "value", "array": [1,2,3] } defines a data container. Note:
  # data containers suffer the same limitation as lists, they will be truncated at
  # 4k. Furthermore, Mission Portal provides no specialized functionality to work
  # with data containers that are inventoried. Thus, it's not advised to use data
  # containers for inventory.

  /bin/echo ^meta=noreport
  /bin/echo '%mydata={ "key": "value", "array": [1,2,3] }'

  # +class defines a namespace scoped class
  /bin/echo ^meta=inventory,attribute_name=Roles,role=server
  /bin/echo "+module_role_server"

  # ^persistence=10 Sets the persistence for classes to some number of minutes.
  # Persistent classes allow you to do some expensive determination less
  # frequently and also to make classes defined from policy available at the very
  # start of subsequent agent runs (until the persistence expires)

  /bin/echo ^meta=noreport
  /bin/echo "^persistence=10"
  /bin/echo "+module_persistent_class_defined_for_10_minutes"
#+end_src

#+RESULTS:
[[file:/tmp/module-protocol-output.dat]]

There are a few ways to get [[https://docs.cfengine.com/docs/master/reference-promise-types-commands.html#module][module protocol]] output into CFEngine.

* usemodule()
:PROPERTIES:
:ID:       400aad7a-343d-43c2-9880-427f15cd60ab
:END:

https://docs.cfengine.com/docs/master/reference-functions-usemodule.html

This function returns a boolean, so it is generally used to define a class when the module is successfully executed.

Note: Classes are resolved during agent pre-evaluation and policies get multiple passes during the normal 3 pass evaluation. So, leveraging a module using this method, you should expect that the module will be executed multiple times.

#+begin_src cfengine3 :tangle module_protocol.cf :command-in-result t :tangle /tmp/example.cf :extra-opts --show-evaluated-vars=default:fabio --show-evaluated-classes=module
    bundle agent __main__
    {
      classes:

          "module_executed_successfully"
            expression => usemodule("simple_module.sh","");

    }
#+end_src

#+RESULTS:
#+begin_example
# cf-agent --no-lock --show-evaluated-vars=default:fabio --show-evaluated-classes=module --file /tmp/example.cf
Class name                                                   Meta tags                               
module_persistent_class_defined_for_10_minutes               noreport,source=module,source=persistent
module_role_server                                           inventory,attribute_name=Roles,role=server,source=module
Variable name                            Variable value                                               Meta tags                               
default:fabios_inventory.admin_contact    {"Fabio","Nick","911"}                                      inventory,attribute_name=Administrative Contacts,source=module
default:fabios_inventory.myarray[key]     array key val                                               inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.mydata          {"array":[1,2,3],"key":"value"}                              noreport,source=module                  
default:fabios_inventory.owner           Fabio                                                        inventory,attribute_name=Owner,source=module
default:fabios_inventory.usb_device[Bus 001 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 001 Device 002: ID 8087:8001] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 002: ID 413c:1004] Dell Computer Corp. Dell USB Keyboard Hub                    inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 004: ID 413c:2006] Dell Computer Corp.                                          inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 005: ID 04f3:036d] Elan Microelectronics Corp. Touchscreen                      inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 007: ID 8087:0a2a] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 009: ID 04ca:703c] Lite-On Technology Corp. Integrated Camera                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 052: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 053: ID 17ef:100f] Lenovo                                                       inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 054: ID 046d:081a] Logitech, Inc. Webcam C260                                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 055: ID 074d:0005] Micronas GmbH                                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 001: ID 1d6b:0003] Linux Foundation 3.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 003: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
#+end_example

https://docs.cfengine.com/docs/master/reference-functions-read_module_protocol.html
** Reference
- [[id:6b2a543a-145b-4e5f-a122-ddddd18b0fa4][usemodule()]]

* commands promises with module => "true"

https://docs.cfengine.com/docs/master/reference-promise-types-commands.html#module

Commands promises can also be used to define classes and variables via the module protocol. When =module => "true"=  is attached to a commands promise, the agent uses the module protocol to interpret stdout.

Note: Unlike classes and vars, commands promises are not executed during pre-evaluation. Thus classes and variables defined via this methodology will note available until they are executed during the normal 3 pass evaluation.


#+begin_src cfengine3 :tangle module_protocol.cf :command-in-result t :tangle /tmp/example.cf :extra-opts --show-evaluated-vars=default:fabio --show-evaluated-classes=module
    bundle agent __main__
    {
      commands:

          "$(sys.workdir)/modules/simple_module.sh"
            module => "true";

    }
#+end_src

#+RESULTS:
#+begin_example
# cf-agent --no-lock --show-evaluated-vars=default:fabio --show-evaluated-classes=module --file /tmp/example.cf
Class name                                                   Meta tags                               
module_persistent_class_defined_for_10_minutes               noreport,source=module,source=persistent
module_role_server                                           inventory,attribute_name=Roles,role=server,source=module
Variable name                            Variable value                                               Meta tags                               
default:fabios_inventory.admin_contact    {"Fabio","Nick","911"}                                      inventory,attribute_name=Administrative Contacts,source=module
default:fabios_inventory.myarray[key]     array key val                                               inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.mydata          {"array":[1,2,3],"key":"value"}                              noreport,source=module                  
default:fabios_inventory.owner           Fabio                                                        inventory,attribute_name=Owner,source=module
default:fabios_inventory.usb_device[Bus 001 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 001 Device 002: ID 8087:8001] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 002: ID 413c:1004] Dell Computer Corp. Dell USB Keyboard Hub                    inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 004: ID 413c:2006] Dell Computer Corp.                                          inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 005: ID 04f3:036d] Elan Microelectronics Corp. Touchscreen                      inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 007: ID 8087:0a2a] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 009: ID 04ca:703c] Lite-On Technology Corp. Integrated Camera                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 052: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 053: ID 17ef:100f] Lenovo                                                       inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 054: ID 046d:081a] Logitech, Inc. Webcam C260                                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 055: ID 074d:0005] Micronas GmbH                                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 001: ID 1d6b:0003] Linux Foundation 3.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 003: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
#+end_example

* Using read_module_protocol()
:PROPERTIES:
:ID:       3e64a62a-82a3-4f99-88d3-c28857bbd81e
:CREATED:  [2022-06-14 Tue 09:13]
:END:

https://docs.cfengine.com/docs/master/reference-functions-read_module_protocol.html

This function, like ~usemodule()~ returns boolean and is typically used to define a class after successfully reading the module protocol from a file. It's very useful in situations where collecting the information to emit via the protocol is expensive. The process to generate the information can be run less frequently and simply read in.

Note: This function is particularly interesting for the Inventory subsystem in CFEngine Enterprise. CFEngine Enterprise reporting is centered around /current/ state. Thus, there is an expectation that each agent run will result in the same variables being defined with the same tags for inventory. If for example an inventoried item is only defined once a day, there will only be a brief period of time where that is visible in the inventory subsystem (it will be available in the historical variable data, but that does not have a long life, nor is that integrated into the inventory subsystem)..


#+begin_src cfengine3 :tangle module_protocol.cf :command-in-result t :tangle /tmp/example.cf :extra-opts --show-evaluated-vars=default:fabio --show-evaluated-classes=module
  bundle agent __main__
  {
    commands:

        "$(sys.workdir)/modules/simple_module.sh > /tmp/cached-module-protocol.txt"
          contain => in_shell,
          action => if_elapsed( "43800" );  # Refresh this data about once a month

    classes:
      "module_data_read"
         expression => read_module_protocol( "/tmp/cached-module-protocol.txt" ),
         if => isplain(  "/tmp/cached-module-protocol.txt" );
  }
#+end_src

#+RESULTS:
#+begin_example
# cf-agent --no-lock --show-evaluated-vars=default:fabio --show-evaluated-classes=module --file /tmp/example.cf
Class name                                                   Meta tags                               
module_persistent_class_defined_for_10_minutes               noreport,source=module,source=persistent
module_role_server                                           inventory,attribute_name=Roles,role=server,source=module
Variable name                            Variable value                                               Meta tags                               
default:fabios_inventory.admin_contact    {"Fabio","Nick","911"}                                      inventory,attribute_name=Administrative Contacts,source=module
default:fabios_inventory.myarray[key]     array key val                                               inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.mydata          {"array":[1,2,3],"key":"value"}                              noreport,source=module                  
default:fabios_inventory.owner           Fabio                                                        inventory,attribute_name=Owner,source=module
default:fabios_inventory.usb_device[Bus 001 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 001 Device 002: ID 8087:8001] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 001: ID 1d6b:0002] Linux Foundation 2.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 002: ID 413c:1004] Dell Computer Corp. Dell USB Keyboard Hub                    inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 004: ID 413c:2006] Dell Computer Corp.                                          inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 005: ID 04f3:036d] Elan Microelectronics Corp. Touchscreen                      inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 007: ID 8087:0a2a] Intel Corp.                                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 009: ID 04ca:703c] Lite-On Technology Corp. Integrated Camera                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 052: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 053: ID 17ef:100f] Lenovo                                                       inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 054: ID 046d:081a] Logitech, Inc. Webcam C260                                   inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 002 Device 055: ID 074d:0005] Micronas GmbH                                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 001: ID 1d6b:0003] Linux Foundation 3.0 root hub                                inventory,attribute_name=USB Devices,source=module
default:fabios_inventory.usb_device[Bus 003 Device 003: ID 17ef:1010] Lenovo Lenovo ThinkPad Dock                                  inventory,attribute_name=USB Devices,source=module
#+end_example

** Reference
- [[id:c9c6f257-b290-4837-a972-b2d9951e69b8][read_module_protocol()]]
