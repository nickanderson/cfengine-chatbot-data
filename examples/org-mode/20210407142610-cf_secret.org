:PROPERTIES:
:CREATED:  [2021-04-07 Wed 14:34]
:ID:       c2c9d90b-3f32-4a69-bef3-ed5ec92c8936
:index: [[id:38277465-771a-4db4-983a-8dfd434b1aff][CFEngine_examples]]
:END:
#+title: Example illustrating cf-secret

~cf-secret~  is a tool for encrypting and decrypting files using CFEngine host keys.
Read the blog post [[https://cfengine.com/blog/2020/cf-secret/][introducing cf-secret]].

#+CAPTION: cf-secret --help
#+begin_src sh :results output :exports both
  cf-secret --help
#+end_src

#+RESULTS:
#+begin_example
Usage: cf-secret COMMAND [OPTIONS] [FILE]

Commands:
  encrypt      - Encrypt data for one or more hosts/keys.
                 Usage: cf-secret encrypt -k/-H KEY/HOST -o OUTPUT INPUT
  decrypt      - Decrypt data.
                 Usage: cf-secret decrypt [-k/-H KEY/HOST] -o OUTPUT INPUT
  print-headers - Print headers from an encrypted file.
                 Usage: cf-secret print-headers ENCRYPTED_FILE

Options:
  --help        , -h       - Print the help message
  --manpage     , -M       - Print the man page
  --debug       , -d       - Enable debugging output
  --verbose     , -v       - Enable verbose output
  --log-level   , -g value - Specify how detailed logs should be. Possible values: 'error', 'warning', 'notice', 'info', 'verbose', 'debug'
  --inform      , -I       - Enable basic information output
  --key         , -k value - Comma-separated list of key files to use (one of -k/-H options is required for encryption)
  --host        , -H value - Comma-separated list of hosts to encrypt/decrypt for (defaults to 'localhost' for decryption)
  --output      , -o value - Output file (required)

Website: http://www.cfengine.com
This software is Copyright (C) 2008,2010-present Northern.tech AS.
#+end_example

* Encrypting data
:PROPERTIES:
:ID:       bea5404f-33d0-45b3-bdfc-6992ac6ce28a
:END:

#+CAPTION: Encrypt data from STDIN 
#+begin_src sh :results output :exports both
  cf-secret encrypt --key ~/.cfagent/ppkeys/localhost.pub -o /tmp/secrets.json.cfsecret <\(echo '{ "username": "secret_user", "password": "secret_token" }'\)
  cf-secret print-headers /tmp/secrets.json.cfsecret
#+end_src

#+RESULTS:
: Version: 1.0
: Encrypted-for: SHA=43c979e264924d0b4a2d3b568d71ab8c768ef63487670f2c51cd85e8cec63834

* Storing decrypted content in a variable
:PROPERTIES:
:ID:       e431a55b-1386-4eaa-8eb6-cfe7964cb317
:END:

#+CAPTION: Load cf-secret encrypted data from policy
#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both :tangle example_cf_secret_execresult.cf
  bundle agent example_load_encrypted_data_via_execresult
  {
    vars:
        "decrypt_cmd" string => "$(sys.bindir)/cf-secret decrypt --key $(sys.workdir)/ppkeys/localhost.priv --output - /tmp/secrets.json.cfsecret";
        "d" data => parsejson( execresult( $(decrypt_cmd), noshell) );

    reports:
        "username: $(d[username])";
        "password: $(d[password])";
  }
  bundle agent __main__
  {
    methods:
      "example_load_encrypted_data_via_execresult";
  }
#+END_SRC

#+RESULTS:
: R: username: secret_user
: R: password: secret_token

** References :noexport:

- [[id:7a8bbdaf-e88e-4f9b-afbf-f0d7a35eddf3][function-parsejson()]]
- [[id:85388e2b-803b-4ab6-9c7f-f5dca56600d4][function-execresult()]]

  
* Considerations for CFEngine Enterprise

By default, we report variables that are /not/ tagged with =noreport= or that are /not/ prefixed with =_= (underscore).

#+caption: Example Policy
#+begin_src cfengine3 :include-stdlib t :log-level info :exports both
  bundle agent __main__
  {
    vars:
        "d"
          data => parsejson( execresult( $(decrypt_cmd), noshell) ),
          meta => { "noreport" };
      
        "_d"
          data => parsejson( execresult( $(decrypt_cmd), noshell) );
  }
#+end_src


I have built a habit of using =_= prefixed variables. If there is a variable that I find particularly interesting, I tend to tag it for /Inventory/ so that it's more easily accessible.

* Are my keys paired correctly? Use cf-secret to check
:PROPERTIES:
:ID:       db131c74-488a-45b9-b1a5-21201c1e5c22
:END:


#+CAPTION: Check that a key pair matches
#+begin_src sh :results output :exports both
  PUBLIC_KEY="${HOME}/.cfagent/ppkeys/localhost.pub"
  PRIVATE_KEY="${HOME}/.cfagent/ppkeys/localhost.priv"
  PLAIN_TEXT_FILE="/tmp/check-cfengine-keypair-match.txt"
  ENCRYPTED_FILE="${PLAIN_TEXT_FILE}-encrypted"
  DECRYPTED_FILE="${PLAIN_TEXT_FILE}-decrypted"
  echo "Check if my keypair matches" > ${PLAIN_TEXT_FILE}
  cf-secret encrypt --key ${PUBLIC_KEY} --output ${ENCRYPTED_FILE} ${PLAIN_TEXT_FILE}
  cf-secret decrypt --key ${PRIVATE_KEY} --output ${DECRYPTED_FILE} ${ENCRYPTED_FILE}
  diff ${PLAIN_TEXT_FILE} ${DECRYPTED_FILE} 
#+end_src

#+RESULTS:


