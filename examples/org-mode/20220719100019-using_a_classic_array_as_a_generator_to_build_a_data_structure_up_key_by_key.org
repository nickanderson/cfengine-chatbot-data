:properties:
:CFEngine_Example_Index: [[id:38277465-771a-4db4-983a-8dfd434b1aff][CFEngine_examples]]
:CFEngine_Functions: [[id:cb299172-277a-42de-a1c9-c82e54379e4e][Function: getindices()]] [[id:a136eeee-4d49-4d15-afb7-0e8c1104d488][Function: strcmp()]]  
:ID:       b9056adb-525e-4876-a9d5-762c88816498
:CREATED:  [2022-07-19 Tue 10:01]
:end:
#+title: Example illustrating using a classic array as a generator to build a data structure up key by key

#+caption: Using classic array as a generator to build a data structure up key by key
#+begin_src cfengine3 :include-stdlib t :log-level info :exports both :define debug :tangle using_a_classic_array_as_a_generator_to_build_a_data_structure_up_key_by_key.cf
  bundle agent __main__
  {
    vars:
        "data" data => parsejson('{
    "vars": {
      "myorg_test02_config_enabled": 0,
      "myorg_postfix_config_enabled": 0,
      "myorg_sshd_config_enabled": 1
    }
  }');

        # Generate a classic array by iterating over keys and defining them based on the criteria
        "policy_name_keys" slist => getindices("data[vars]");             # Get iterator
        "policy_name_enabled[$(policy_name_keys)]"                        # Build array if criteria matches
          string => "$(data[vars][$(policy_name_keys)])",
          if => strcmp( "1", "$(data[vars][$(policy_name_keys)])");
        "policy_names_enabled" slist => getindices( policy_name_enabled ); # Get consolidated list of enabled

    methods:
        "any" usebundle => _show_policy_enabled("$(this.bundle)", @(policy_names_enabled) );

    reports:
      (DEBUG|debug)::
        "$(this.bundle):$(policy_names_enabled):$(data[vars][$(policy_names_enabled)])";
  }
  bundle agent _show_policy_enabled(id, list)
  {
    reports:
      (DEBUG|debug)::
        "$(this.bundle):$(list)=$($(id).data[vars][$(list)])";
  }
#+end_src

#+RESULTS:
: R: _show_policy_enabled:myorg_sshd_config_enabled=1
: R: main:myorg_sshd_config_enabled:1

